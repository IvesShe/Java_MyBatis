<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ives.dao.StudentDao">
    <!--使用insert、update、delete、select標籤寫sql語句-->

    <!--
        parameterType：指定dao接口形參的類型
                       這個屬性的值可以使用 java類型的全限定名稱 或者 mybatis定義的別名
        mybatis執行的sql語句： select id,name,email,age from student where id=?
        ? 是佔位符，使用jdbc中的PreparedStatement執行這樣的語句

        PreparedStatement pst = conn.preparedStatement("select id,name,email,age from student where id=?");

        給 ? 位置賦值
        參數Integer，執行pst.setInt(1,1008);
        參數String，執行pst.setString(1,"1008");

        第一個用法： java類型的全限定類型名稱 parameterType = "java.lang.Integer"
        第二個用法： mybatis定義的java類型的別名 parameterType = "int"

        parameterType： mybatis通過反射機制可以獲取 dao接口方法參數的類型，可以不寫
    -->
    <select id="selectById" parameterType="int"
            resultType="com.ives.domain.Student">
        select id,name,email,age from student where id=#{studentId}
    </select>

    <!--
        dao接口是一個簡單類型的參數
        mapper文件，獲取這個參數值，使用#{任意字符}
    -->
    <select id="selectByEmail" resultType="com.ives.domain.Student">
        select id,name,email,age from student where email=#{studentEmail}
    </select>

    <!--
        多個簡單類型的參數
        當使用了@Param命名後，例如@Param("myname").
        在mapper中，使用#{命名的參數}，例如 #{myname}
    -->
    <select id="selectByNameOrAge" resultType="com.ives.domain.Student">
        select id,name,email,age from student where name=#{myname} or age=#{myage}
    </select>

    <!--
        一個java對象作為方法的參數，使用對象的屬性作為參數值使用
        簡單的語法： #{屬性名}， mybatis調用此屬性的getXXX()方法獲取屬性值
    -->
    <select id="selectByObject" resultType="com.ives.domain.Student">
        select id,name,email,age from student where name=#{name} or age=#{age}
    </select>

<!--    <select id="selectByObject" resultType="com.ives.domain.Student">-->
<!--        select id,name,email,age from student where-->
<!--        name=#{name,javaType=java.lang.String,jdbcType=VARCHAR}-->
<!--        or-->
<!--        age=#{age,javaType=java.lang.Integer,jdbcType=INTEGER}-->
<!--    </select>-->

    <select id="selectByQueryParam" resultType="com.ives.domain.Student">
        select id,name,email,age from student where name=#{p1} or age=#{p2}
    </select>

    <!--
        使用位置獲取參數值，dao接口方法是多個簡單類型的參數
        語法： #{arg0},#{arg1}
    -->
    <select id="selectByPosition" resultType="com.ives.domain.Student">
        select id,name,email,age from student where name=#{arg0} or age=#{arg1}
    </select>

    <!--
        使用Map傳遞參數
        在mapper文件中，獲取map的值，是通過key獲取的，語法： #{key}
    -->
    <select id="selectStudentByMap" resultType="com.ives.domain.Student">
        select id,name,email,age from student where name=#{myname} or age=#{myage}
    </select>

    <!--更新-->
    <update id="updateStudent" >
        update student set name=#{name},email=#{email} where id=#{id}
    </update>

    <!--${}-->
    <select id="queryStudent" resultType="com.ives.domain.Student">
        select id,name,email,age from student where name=${studentName}
    </select>

    <!--id 列排序-->
    <select id="queryStudentOrderById" resultType="com.ives.domain.Student">
        select id,name,email,age from student order by id
    </select>

    <!--name 列排序-->
    <select id="queryStudentOrderByName" resultType="com.ives.domain.Student">
        select id,name,email,age from student order by name
    </select>

    <select id="queryStudentOrderByColName" resultType="com.ives.domain.Student">
        select id,name,email,age from student order by ${colName} desc
    </select>

    <select id="queryStudentOrderByColName2" resultType="com.ives.domain.Student">
        select id,name,email,age from ${tableName} where age=#{myage} order by ${colName} desc
    </select>

</mapper>